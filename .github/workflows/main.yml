name: Dasmlab Home CX Pipeline (Isolated Builds with Docker Networks)

on:
  push:
    branches: [ "main" ]

jobs:
  cx-pipeline:
    runs-on: self-hosted
    steps:

    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Setup Build Metadata
      id: vars
      run: |
        echo "COMMIT_ID=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
        echo "VERSION_TAG=v$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)" >> $GITHUB_ENV
        echo "NETWORK_NAME=dasmlab-net-${GITHUB_SHA::8}" >> $GITHUB_ENV
        echo "IMAGE_TAG=dasmlab-home_image:${GITHUB_SHA::8}" >> $GITHUB_ENV
        echo "CONTAINER_NAME=dasmlab-home_instance-${GITHUB_SHA::8}" >> $GITHUB_ENV

    - name: Build Phase
      run: |
        docker build -t $IMAGE_TAG .

    - name: Create Isolated Docker Network
      run: |
        docker network create $NETWORK_NAME || true

    - name: Run Phase (App Container)
      run: |
        docker rm -f $CONTAINER_NAME 2>/dev/null || true
        docker run -d --name $CONTAINER_NAME --network $NETWORK_NAME $IMAGE_TAG
        sleep 5
        docker exec $CONTAINER_NAME curl -f http://localhost:80 || (echo "App failed health check" && exit 1)

    - name: Secure Phase (Stub)
      run: |
        echo "Run SAST/DAST tools here using $CONTAINER_NAME on $NETWORK_NAME"
        # docker run --rm --network $NETWORK_NAME dasmlab-security-suite:latest
        exit 0

    - name: Test Phase (Stub)
      run: |
        echo "Run Selenium/Playwright/etc against $CONTAINER_NAME on $NETWORK_NAME"
        # docker run --rm --network $NETWORK_NAME dasmlab-test-suite:latest
        exit 0

    - name: Publish Phase
      run: |
        docker tag $IMAGE_TAG ghcr.io/lmcdasm/dasmlab-home:${VERSION_TAG}
        echo "${{ secrets.DASMLAB_GHCR_PAT }}" | docker login ghcr.io -u lmcdasm --password-stdin

        docker push ghcr.io/lmcdasm/dasmlab-home:${VERSION_TAG}

    - name: GitOps Sync (Deploy) Phase
      run: |
        sed "s|__VERSION__|${VERSION_TAG}|g" k8s_envelope/dasmlab-home_deploy.yaml > generated.yaml

        git config --global user.name "dasmlab-bot"
        git config --global user.email "ci@dasmlab.org"

        git clone https://x-access-token:${{ secrets.DASMLAB_GHCR_PAT }}@github.com/lmcdasm/dasmlab_live_cicd.git

        TARGET_DIR=dasmlab_live_cicd/clusters/dasmlab-prod-1/dasmlab_home
        ARCHIVE_DIR="${TARGET_DIR}/.archive"
        NEW_MANIFEST="${TARGET_DIR}/dasmlab-home-${VERSION_TAG}.yaml"
        CURRENT_MANIFEST="${TARGET_DIR}/current.yaml"

        mkdir -p "$ARCHIVE_DIR"

        # Archive existing manifest if any
        if [ -f "$CURRENT_MANIFEST" ]; then
          OLD_HASH=$(sha256sum "$CURRENT_MANIFEST" | cut -d' ' -f1)
          mv "$CURRENT_MANIFEST" "${ARCHIVE_DIR}/archived-${OLD_HASH}.yaml"
        fi

        # Move in new manifest
        cp generated.yaml "$NEW_MANIFEST"
        cp "$NEW_MANIFEST" "$CURRENT_MANIFEST"

        cd dasmlab_live_cicd
        git add .
        git commit -m "Auto-publish dasmlab-home ${VERSION_TAG} and archive previous manifest"
        git push


    - name: Teardown (Clean Containers & Network)
      if: always()
      run: |
        docker rm -f $CONTAINER_NAME || true
        docker network rm $NETWORK_NAME || true

